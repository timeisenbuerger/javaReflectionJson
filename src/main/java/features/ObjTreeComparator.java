package features;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.Map;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

public class ObjTreeComparator
{
   /**
    *
    * Method checks if the given object contains the same fields and values as in object tree, which is generated by GSON
    *
    * @param objToReflect
    * @param filePath
    * @return true if both kinds of objects contains the same fields and values
    * @throws IOException
    * @throws IllegalAccessException
    */

   public static boolean validate(Object objToReflect, String filePath) throws IOException, IllegalAccessException
   {
      JsonObject genericObjTree = GsonParser.parseToTree(filePath);

      return compareObjects(objToReflect, genericObjTree);
   }

   /**
    *
    * Method to iterate recursive over the generic object tree to compare the given objects
    *
    * @param objToReflect
    * @param genericObj
    * @return true if the values are all the same
    * @throws IllegalAccessException
    */

   private static boolean compareObjects(Object objToReflect, JsonObject genericObj) throws IllegalAccessException
   {
      boolean isEqual = true;

      for( Map.Entry<String, JsonElement> entry : genericObj.entrySet() )
      {
         Field[] declaredFields = objToReflect.getClass().getDeclaredFields();
         boolean fieldAvailable = false;

         for( Field field : declaredFields )
         {
            if( field.getName().equals(entry.getKey()) )
            {
               fieldAvailable = true;
               field.setAccessible(true);

               Object fieldValue = field.get(objToReflect);
               JsonElement jsonElement = entry.getValue();

               if( jsonElement instanceof JsonObject )
               {
                  //go a level deeper
                  isEqual = compareObjects(fieldValue, jsonElement.getAsJsonObject());
               }
               else if( jsonElement instanceof JsonArray )
               {
                  if( fieldValue instanceof Collection )
                  {
                     if( ((JsonArray) jsonElement).size() == ((Collection) fieldValue).size() )
                     {
                        //go a level deeper for every collection entry
                        Object[] objects = ((Collection) fieldValue).toArray();
                        for( int i = 0; i < ((JsonArray) jsonElement).size(); i++ )
                        {
                           if( ((JsonArray) jsonElement).get(i) instanceof JsonObject )
                           {
                              JsonObject jsonObj = ((JsonArray) jsonElement).get(i).getAsJsonObject();
                              Object obj = objects[i];

                              isEqual = compareObjects(obj, jsonObj);
                           }
                           else if( ((JsonArray) jsonElement).get(i) instanceof JsonPrimitive )
                           {
                              String elemString = ((JsonArray) jsonElement).get(i).getAsString().replace("\"", "").trim();
                              Object obj = objects[i];

                              if( !elemString.equals(obj.toString()) )
                              {
                                 isEqual = false;
                              }
                           }
                        }
                     }
                     else
                     {
                        isEqual = false;
                     }
                  }
               }
               else if( jsonElement instanceof JsonPrimitive )
               {
                  String elemString = jsonElement.getAsString().replace("\"", "").trim();
                  if( !elemString.equals(fieldValue.toString()) )
                  {
                     isEqual = false;
                  }
               }

               if( fieldAvailable || !isEqual )
               {
                  //go for next entry
                  break;
               }
            }
         }

         if( !fieldAvailable || !isEqual )
         {
            //some field was'nt where we expected it or something was'nt equal
            isEqual = false;
            break;
         }
      }

      return isEqual;
   }
}
