package features;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.Map;
import java.util.Set;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

public class ObjTreeComparator
{
   /**
    *
    * Method checks if the given object contains the same fields and values as in object tree, which is generated by GSON
    *
    * @param objToReflect
    * @param filePath
    * @return true if both kinds of objects contains the same fields and values
    * @throws IOException
    * @throws IllegalAccessException
    */

   public static boolean validate(Object objToReflect, String filePath) throws IOException, IllegalAccessException
   {
      JsonObject genericObjTree = GsonParser.parseToTree(filePath);

      return compareObjects(objToReflect, genericObjTree);
   }

   /**
    *
    * Method to iterate recursive over the generic object tree to compare the given objects
    *
    * @param objToReflect
    * @param genericObj
    * @return true if the values are all the same
    * @throws IllegalAccessException
    */

   private static boolean compareObjects(Object objToReflect, JsonObject genericObj) throws IllegalAccessException
   {
      boolean isEqual = true;

      for( Map.Entry<String, JsonElement> entry : genericObj.entrySet() )
      {
         Field[] declaredFields = objToReflect.getClass().getDeclaredFields();
         boolean fieldAvailable = false;

         for( Field field : declaredFields )
         {
            if( field.getName().equals(entry.getKey()) )
            {
               fieldAvailable = true;
               field.setAccessible(true);

               isEqual = processForMultipleTypes(objToReflect, isEqual, entry, field);

               if( fieldAvailable || !isEqual )
               {
                  //go for next entry
                  break;
               }
            }
         }

         if( !fieldAvailable || !isEqual )
         {
            //some field was'nt where we expected it or something was'nt equal
            isEqual = false;
            break;
         }
      }

      return isEqual;
   }

   /**
    *
    * Method determines how the given object has to be treated
    *
    * @param objToReflect
    * @param isEqual
    * @param entry
    * @param field
    * @return true if the values are all the same
    * @throws IllegalAccessException
    */

   private static boolean processForMultipleTypes(Object objToReflect, boolean isEqual, Map.Entry<String, JsonElement> entry, Field field)
         throws IllegalAccessException
   {
      Object fieldValue = field.get(objToReflect);
      JsonElement jsonElement = entry.getValue();

      if( jsonElement instanceof JsonObject )
      {
         //go a level deeper
         isEqual = compareObjects(fieldValue, jsonElement.getAsJsonObject());
      }
      else if( jsonElement instanceof JsonArray )
      {
         isEqual = compareCollections(isEqual, fieldValue, (JsonArray) jsonElement);
      }
      else if( jsonElement instanceof JsonPrimitive )
      {
         comparePrimitives(isEqual, jsonElement, fieldValue);
      }
      return isEqual;
   }

   /**
    * Method which handles the comparison between collections
    *
    * @param isEqual
    * @param fieldValue
    * @param jsonElement
    * @return true if the values are all the same
    * @throws IllegalAccessException
    */

   private static boolean compareCollections(boolean isEqual, Object fieldValue, JsonArray jsonElement) throws IllegalAccessException
   {
      if( fieldValue instanceof Collection )
      {
         if( jsonElement.size() == ((Collection) fieldValue).size() )
         {
            //distinguish sets and other collections
            if( fieldValue instanceof Set )
            {
               Set set = (Set) fieldValue;
               for( int i = 0; i < jsonElement.size(); i++ )
               {
                  JsonElement element = jsonElement.get(i);
                  boolean isSomeEqual = false;
                  if( element instanceof JsonObject )
                  {
                     for( Object obj : set )
                     {
                        isSomeEqual = compareObjects(obj, (JsonObject) element);
                        if( isSomeEqual )
                        {
                           break;
                        }
                     }
                     if( !isSomeEqual )
                     {
                        //no equal element in set found, something is not correct
                        isEqual = false;
                     }
                  }
                  else if( element instanceof JsonPrimitive )
                  {
                     for( Object obj : set )
                     {
                        isSomeEqual = comparePrimitives(isEqual, element, obj);
                        if( isSomeEqual )
                        {
                           break;
                        }
                     }
                     if( !isSomeEqual )
                     {
                        //no equal element in set found, something is not correct
                        isEqual = false;
                     }
                  }
               }
            }
            else
            {
               //go a level deeper for every collection entry
               Object[] objects = ((Collection) fieldValue).toArray();
               for( int i = 0; i < jsonElement.size(); i++ )
               {
                  if( jsonElement.get(i) instanceof JsonObject )
                  {
                     JsonObject jsonObj = jsonElement.get(i).getAsJsonObject();
                     Object obj = objects[i];

                     isEqual = compareObjects(obj, jsonObj);
                  }
                  else if( jsonElement.get(i) instanceof JsonPrimitive )
                  {
                     isEqual = comparePrimitives(isEqual, jsonElement.get(i), objects[i]);
                  }
               }
            }
         }
         else
         {
            isEqual = false;
         }
      }
      return isEqual;
   }

   /**
    *
    * Method which handles the comparison between primitives
    *
    * @param isEqual
    * @param jsonElement
    * @param object
    * @return
    */

   private static boolean comparePrimitives(boolean isEqual, JsonElement jsonElement, Object object)
   {
      String elemString = jsonElement.getAsString().replace("\"", "").trim();
      Object obj = object;

      if( !elemString.equals(obj.toString()) )
      {
         isEqual = false;
      }
      return isEqual;
   }
}
